/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FractPack;

import java.awt.BasicStroke;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.RandomAccessFile;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Marina Nik
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RunButton = new javax.swing.JButton();
        DrawingPanel = new javax.swing.JPanel();
        TextField = new javax.swing.JTextField();
        LevelLabel = new javax.swing.JLabel();
        FractalsComboBox = new javax.swing.JComboBox<>();
        CombineRadioButton = new javax.swing.JRadioButton();
        ReplaceRadioButton = new javax.swing.JRadioButton();
        ClearButton = new javax.swing.JButton();
        ConfigureButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        RunButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        RunButton.setText("Run");
        RunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunButtonActionPerformed(evt);
            }
        });

        DrawingPanel.setBackground(new java.awt.Color(255, 255, 255));
        DrawingPanel.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        DrawingPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DrawingPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout DrawingPanelLayout = new javax.swing.GroupLayout(DrawingPanel);
        DrawingPanel.setLayout(DrawingPanelLayout);
        DrawingPanelLayout.setHorizontalGroup(
            DrawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        DrawingPanelLayout.setVerticalGroup(
            DrawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        TextField.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        LevelLabel.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        LevelLabel.setText("Levels:");

        FractalsComboBox.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        FractalsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Triangle", "Tree", "Circle", "Square", "Star", "LSystem" }));

        CombineRadioButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        CombineRadioButton.setSelected(true);
        CombineRadioButton.setText("Combine");
        CombineRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CombineRadioButtonActionPerformed(evt);
            }
        });

        ReplaceRadioButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        ReplaceRadioButton.setText("Replace");
        ReplaceRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReplaceRadioButtonActionPerformed(evt);
            }
        });

        ClearButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        ClearButton.setText("Clear");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });

        ConfigureButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        ConfigureButton.setText("Configure...");
        ConfigureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigureButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DrawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(RunButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FractalsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CombineRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ReplaceRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConfigureButton, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addComponent(LevelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RunButton, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(TextField)
                    .addComponent(LevelLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FractalsComboBox)
                    .addComponent(CombineRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ReplaceRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ClearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ConfigureButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DrawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunButtonActionPerformed
        // TODO add your handling code here:
        int iters = Integer.parseInt(TextField.getText());
        graph = (Graphics2D)DrawingPanel.getGraphics();
        if (ReplaceRadioButton.isSelected()){
            graph.setColor(Color.WHITE);
            graph.fillRect(0, 0, DrawingPanel.getWidth(), DrawingPanel.getHeight());
            graph.setColor(Color.BLACK);
            graph = (Graphics2D)DrawingPanel.getGraphics();
        }
        graph.setStroke(new BasicStroke(1));
        pairs.clear();
        String item = FractalsComboBox.getSelectedItem().toString();
        switch(item){
            case "Feather":
                Double xA = new Double(DrawingPanel.getWidth() / 3.0);
                Double yA = new Double(DrawingPanel.getHeight() / 3.0);
                Double xB = new Double(DrawingPanel.getWidth() / 6.0 * 5.0);
                Double yB = new Double(DrawingPanel.getHeight() / 6.0 * 5.0);
                featherFractal(iters, xA, yA, xB, yB);
                break;
            case "Leaf":
                break;
            case "Triangle":
                graph.setColor(colorNow);
                graph.setStroke(new BasicStroke((float)shapeFractLineStroke));
                triangleFractal(iters, xStart, yStart, shapeFractLineLen, shapeFractLineStroke);  //NEEDED make an inteface
                break;
            case "Tree":
                //Let's assume that the last 2 iters have to be thickness 1. We have to calculate the thinnening
                graph.setColor(colorNow);
                graph.setStroke(new BasicStroke((float)treeFractLineStroke));
                treeFractalPower = (double)(iters - 2);
                treeFractalBase = 1.0 / treeFractLineStroke;  //30.0 here is the thickness of the starting line
                treeFractLineThin = (double)Math.pow(treeFractalBase, 1 / treeFractalPower);
                treeFractal(iters, treeFractLineLen, treeFractLineStroke, treeFractLineXStart, treeFractLineYStart, treeFractInitAngle);
                break;
            case "Circle":
                circleFractal(iters, 200, xStart, yStart);
                break;
            case "Square":
                squareFractal(iters, 150, xStart, yStart);
                break;
            case "Star":
                graph.setColor(colorNow);
                graph.setStroke(new BasicStroke((float)starFractLineStroke));
                starFractal(iters, starFractLineLen, starFractLineNum, starFractLineShrink, xStart, yStart);
                graph.setStroke(new BasicStroke((float)1));
                break;
            case "LSystem":
                Path instruct = LSystemGen(iters);
                LSystemGenerator(100, DrawingPanel.getWidth() / 2, DrawingPanel.getHeight() - 1, 180, instruct);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_RunButtonActionPerformed

    private void CombineRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CombineRadioButtonActionPerformed
        // TODO add your handling code here:
        if (ReplaceRadioButton.isSelected())
            ReplaceRadioButton.setSelected(false);
    }//GEN-LAST:event_CombineRadioButtonActionPerformed

    private void ReplaceRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReplaceRadioButtonActionPerformed
        // TODO add your handling code here:
        if (CombineRadioButton.isSelected())
            CombineRadioButton.setSelected(false);
    }//GEN-LAST:event_ReplaceRadioButtonActionPerformed

    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        // TODO add your handling code here:
        graph = (Graphics2D)DrawingPanel.getGraphics();
        graph.setColor(Color.WHITE);
        graph.fillRect(0, 0, DrawingPanel.getWidth(), DrawingPanel.getHeight());
        graph.setColor(Color.BLACK);
        DrawingPanel.paintComponents(graph);
        DrawingPanel.setVisible(true);
    }//GEN-LAST:event_ClearButtonActionPerformed

    private void ConfigureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigureButtonActionPerformed
        // TODO add your handling code here:
        //Calling the right config class
        String item = FractalsComboBox.getSelectedItem().toString();
        switch(item){
            case "Feather":
                break;
            case "Leaf":
                break;
            case "Triangle":
                colorNow = Color.BLACK;
                TriangleFractEditGUI.main();
                break;
            case "Tree":
                colorNow = Color.BLACK;
                TreeFractEditGUI.main();
                break;
            case "Circle":
                break;
            case "Square":
                break;
            case "Star":
                colorNow = Color.BLACK;
                StarFractEditGUI.main();
                break;
            case "LSystem":
                break;
            default:
                break;
        }
    }//GEN-LAST:event_ConfigureButtonActionPerformed

    private void DrawingPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DrawingPanelMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON1){
            xStart = evt.getX();
            yStart = evt.getY();
            treeFractLineXStart = evt.getX();
            treeFractLineYStart = evt.getY();
        }
    }//GEN-LAST:event_DrawingPanelMouseClicked

    private void featherFractal(int iters, Double xA, Double yA, Double xB, Double yB){
        //IN FUTURE!!! Need to improve this function
        FeatherFractalMaker AB = new FeatherFractalMaker(xA, yA, xB, yB);
        if (iters == 0){
            //Graphics2D gr = AB.drawLine();
            graph.draw(new Line2D.Double(AB.getXA(), AB.getYA(), AB.getXB(), AB.getYB()));
            //DrawingPanel.paintComponents(graph);
            //DrawingPanel.setVisible(true);
        }
        else{
            //It DOES send the data correctly. It isn't drawing it the way it should
            Double xC = new Double((AB.getXA() + AB.getXB()) / 2.0);
            Double yC = new Double((AB.getYA() + AB.getYB()) / 2.0);
            Double xD = new Double(AB.getXA() + (xC - AB.getXA()) / 2.0 - (yC - AB.getYA()) / 2.0);
            Double yD = new Double(AB.getYA() + (yC - AB.getYA()) / 2.0 - (xC - AB.getXA()) / 2.0);

            FeatherFractalMaker DA = new FeatherFractalMaker(Double.valueOf(xD), Double.valueOf(yD), AB.getXA(), AB.getYA());
            FeatherFractalMaker DC = new FeatherFractalMaker(Double.valueOf(xD), Double.valueOf(yD), Double.valueOf(xC), Double.valueOf(yC));
            FeatherFractalMaker DB = new FeatherFractalMaker(Double.valueOf(xD), Double.valueOf(yD), AB.getXB(), AB.getYB());
            
            featherFractal(iters - 1, DA.getXA(), DA.getYA(), DA.getXB(), DA.getYB());
            featherFractal(iters - 1, DC.getXA(), DC.getYA(), DC.getXB(), DC.getYB());
            featherFractal(iters - 1, DB.getXA(), DB.getYA(), DB.getXB(), DB.getYB());
        }
        DrawingPanel.paintComponents(graph);
        DrawingPanel.setVisible(true);
    }
    
    private void leafFractal(int iters){
        
    }
    
    private void triangleFractal(int iters, double x, double y, double length, double thick){
        if (iters == 1 && shapeFractFill)
            drawTriangle(x, y, length, true);
        else if (iters == 1)
            drawTriangle(x, y, length, false);
        else{
            drawTriangle(x, y, length, false);
            if (thick < 1)
                thick = 1.0;
            triangleFractal(iters - 1, x, y, length / 2, thick * shapeFractLineThin);
            triangleFractal(iters - 1, x + length / 4, y - Math.sin(Math.PI / 3) * length / 2, length / 2, thick * shapeFractLineThin);
            triangleFractal(iters - 1, x + length / 2, y, length / 2, thick * shapeFractLineThin);
        }
    }
    
    private void drawTriangle(double x, double y, double len, boolean fill){
        if (!fill){
            graph.draw(new Line2D.Double(x, y, x + len, y));
            graph.draw(new Line2D.Double(x, y, x + len / 2.0, y - Math.sin(Math.PI / 3.0) * len));
            graph.draw(new Line2D.Double(x + len / 2.0, y - Math.sin(Math.PI / 3.0) * len, x + len, y));
        }
        if (fill && shapeFractFill){
            double xs[] = {x, x + len, x + len / 2.0};
            double ys[] = {y, y, y - Math.sin(Math.PI / 3.0) * len};
            GeneralPath polygon = new GeneralPath(GeneralPath.WIND_EVEN_ODD, 3);
            polygon.moveTo(xs[0], ys[0]);
            for (int i = 1; i < xs.length; i++)
                polygon.lineTo(xs[i], ys[i]);
            polygon.closePath();
            graph.fill(polygon);
        }
    }
    
    private void treeFractal(int iters, double length, double thickness, double x, double y, double angle){
        
        double radian = angle * Math.PI / 180;
        double newX = x + length * Math.sin(radian);
        double newY = y + length * Math.cos(radian);
        if (length < 1) length = 1;
        if (thickness < 1) thickness = 1;
        Line2D.Double line = new Line2D.Double(x, y, newX, newY);
        graph.setStroke(new BasicStroke((float)thickness));
        graph.draw(line);
        
        if (iters - 1 >= 0 && length >= 1 && thickness >= 1){
            treeFractal(iters - 1, length * treeFractLineShrink, thickness * treeFractLineThin, newX, newY, angle + treeFractAngleLeft);
            treeFractal(iters - 1, length * treeFractLineShrink, thickness * treeFractLineThin, newX, newY, angle + treeFractAngleRight);
        }
        DrawingPanel.paintComponents(graph);
        DrawingPanel.setVisible(true);
    }
    
    private void circleFractal(int iters, double radius, double x, double y){
        Ellipse2D elip = new Ellipse2D.Double(x - radius, y - radius, 2* radius, 2 * radius);
        graph.draw(elip);
        double halvedRadius = new Double(Double.toString(radius)) / 2;
        if (iters - 1 > 0 & radius > 2){
            circleFractal(iters - 1, halvedRadius, x - radius, y);
            circleFractal(iters - 1, halvedRadius, x + radius, y);
            circleFractal(iters - 1, halvedRadius, x, y - radius);
            circleFractal(iters - 1, halvedRadius, x, y + radius);
        }
        DrawingPanel.paintComponents(graph);
        DrawingPanel.setVisible(true);
    }
    //IDEA make different variations of this fractal
    
    private void squareFractal(int iters, double radius, double x, double y){
        Rectangle2D rect = new Rectangle2D.Double(x - radius, y - radius, 2* radius, 2 * radius);
        graph.draw(rect);
        double halvedRadius = new Double(Double.toString(radius)) / 2;
        if (iters - 1 > 0 & radius > 2){
            squareFractal(iters - 1, halvedRadius, x - 2 * radius + halvedRadius, y);
            squareFractal(iters - 1, halvedRadius, x + 2 * radius - halvedRadius, y);
            squareFractal(iters - 1, halvedRadius, x, y - 2 * radius + halvedRadius);
            squareFractal(iters - 1, halvedRadius, x, y + 2 * radius - halvedRadius);
        }
        DrawingPanel.paintComponents(graph);
        DrawingPanel.setVisible(true);
    }
    //IDEA make a square fractal with new squares drawn on corners, not on sides
    //IDEA combine them both??
    
    private void starFractal(int iters, double length, int lineNum, double lineShrink, double x, double y){
        double degree = 360 / lineNum;
        double curDegree = 360 / lineNum;
        ArrayList<XYPair> pairs = new ArrayList<>();
        for (int i = 0; i < lineNum; i++){
            double radian = curDegree * Math.PI / 180;
            Line2D.Double line = new Line2D.Double(x, y, x + length * Math.sin(radian), y + length * Math.cos(radian));
            pairs.add(new XYPair(x + length * Math.sin(radian), y + length * Math.cos(radian)));
            graph.draw(line);
            curDegree += degree;
        }
        
        if (iters - 1 > 0){
            for (int i = 0; i < pairs.size(); i++){
                starFractal(iters - 1, length / lineShrink, lineNum, lineShrink, pairs.get(i).getX(), pairs.get(i).getY());
            }
        }
        DrawingPanel.paintComponents(graph);
        DrawingPanel.setVisible(true);
    }
    
    private Path LSystemGen(int iters){
        //ERROR! This function only allowns up to 2 runs in a row, then the program must be restarted
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files", "txt");
        fc.setFileFilter(filter);
        int val = fc.showOpenDialog(this);
        String name = "";
        Path p = null;
        if (val == JFileChooser.APPROVE_OPTION){
            try{
                for (int i = 0; i < iters; i++){
                    File raf = fc.getSelectedFile();
                    p = Paths.get(raf.getAbsolutePath());
                    name = raf.getName();
                    String path = raf.getParent();
                    String newFileName = path + "\\temp.txt";
                    
                    Path newPath = Paths.get(newFileName);
                    if (!Files.exists(newPath))
                        newPath = Files.createFile(newPath);
                    File writeTo = new File(newFileName);
                    
                    //If there is something in the Init file before the start, clear it
                    if (i == 0){
                        if (raf.length() != 0){
                            BufferedWriter write = new BufferedWriter(new FileWriter(raf));
                            write.close();
                        }
                    }
                    
                    BufferedReader read = new BufferedReader(new FileReader(raf));
                    BufferedWriter write = new BufferedWriter(new FileWriter(writeTo));
                    
                    if (raf.length() == 0)
                        write.write("F");
                    else{
                        while (read.ready()){
                            char c = (char)read.read();
                            if (c == 'F'){  //MAYBE TO DO: 2 letters in 1 byte?
                                write.write("FF+[+F-F-F]-[-F+F+F]");
                            }
                            else
                                write.write(c);
                        }
                    }
                    read.close();
                    write.close();
                    boolean res = raf.delete();
                    Path source = Paths.get(writeTo.getAbsolutePath());
                    p = Files.move(source, source.resolveSibling(name));
                }
            }
            catch(Exception ex){
                
            }
        }
        return p;
    }
    
    private void LSystemGenerator(double initLength, double initX, double initY, double initAngle, Path instruction){
        double curLength = initLength;
        double curX = initX;
        double curY = initY;
        double curAngleDegree = initAngle;
        double keepX = initX;
        double keepY = initY;
        double keepLength = initLength;
        double keepAngle = initAngle;
        Random rand = new Random();
        double angleShift = 0.0;
        double radian = 0.0;
        double shortage = 0.9;
        
        try{
            File file = instruction.toFile();
            BufferedReader read = new BufferedReader(new FileReader(file));
            while (read.ready()){
                char now = (char)read.read();
                switch (now){
                    case 'F':  //if F, move with drawing a line
                        radian = curAngleDegree * Math.PI / 180;
                        Line2D.Double line = new Line2D.Double(curX, curY, curX + curLength * Math.sin(radian), curY + curLength * Math.cos(radian));
                        graph.draw(line);
                        curX += curLength * Math.sin(radian);
                        curY += curLength * Math.cos(radian);
                        curLength *= shortage;
                        DrawingPanel.paintComponents(graph);
                        DrawingPanel.setVisible(true);
                        break;
                    case 'G':  //if G, move without drawing
                        radian = curAngleDegree * Math.PI / 180;
                        curX += curLength * Math.sin(radian);
                        curY += curLength * Math.cos(radian);
                        curLength *= shortage;
                        DrawingPanel.paintComponents(graph);
                        DrawingPanel.setVisible(true);
                        break;
                    case '+':  //if +, rotate for several degrees +
                        angleShift = rand.nextInt(45) + 1 + rand.nextDouble();
                        //angleShift = 25;
                        curAngleDegree += angleShift;
                        DrawingPanel.paintComponents(graph);
                        DrawingPanel.setVisible(true);
                        break;
                    case '-':  //if -, rotate for several degrees -
                        angleShift = rand.nextInt(45) + 1 + rand.nextDouble();
                        //angleShift = 25;
                        curAngleDegree -= angleShift;
                        DrawingPanel.paintComponents(graph);
                        DrawingPanel.setVisible(true);
                        break;
                    case '[':  //if [, save the current coordinates
                        keepX = curX;
                        keepY = curY;
                        keepLength = curLength;
                        keepAngle = curAngleDegree;
                        DrawingPanel.paintComponents(graph);
                        DrawingPanel.setVisible(true);
                        break;
                    case ']':  //if ], return to kept coordinates (zeros by default)
                        curX = keepX;
                        curY = keepY;
                        curLength = keepLength;
                        curAngleDegree = keepAngle;
                        DrawingPanel.paintComponents(graph);
                        DrawingPanel.setVisible(true);
                        break;
                    default:
                        break;
                }
            }
        }
        catch(Exception ex){
            
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
                graph = (Graphics2D)DrawingPanel.getGraphics();
                treeFractalPower = 0.0;
                treeFractalBase = 0.0;
                treeFractLineThin = 0.0;
                treeFractLineLen = 200.0;
                treeFractAngleLeft = - 30.0;
                treeFractAngleRight = 30.0;
                treeFractLineStroke = 30.0;
                treeFractLineShrink = 0.75;
                treeFractLineXStart = DrawingPanel.getWidth() / 2;
                treeFractLineYStart = DrawingPanel.getHeight() - 1;
                treeFractInitAngle = 180;
                
                pairs = new ArrayList<>();
                
                starFractLineLen = 200.0;
                starFractLineNum = 7;
                starFractLineShrink = 2.5;
                starFractLineStroke = 1.0;
                
                shapeFractLineLen = 750.0;
                shapeFractLineThin = 1.0;
                shapeFractLineStroke = 1.0;
                shapeFractFill = true;
    
                colorNow = Color.BLACK;  //default
                xStart = DrawingPanel.getWidth() / 2;
                yStart = DrawingPanel.getHeight() / 2;
            }
        });
    }

    public static Graphics2D graph;
    private static double treeFractalPower;
    private static double treeFractalBase;
    public static double treeFractLineThin;
    public static double treeFractLineLen;
    public static double treeFractAngleLeft;
    public static double treeFractAngleRight;
    public static double treeFractLineStroke;
    public static double treeFractLineShrink;
    private static double treeFractLineXStart;
    private static double treeFractLineYStart;
    public static double treeFractInitAngle;
    
    public static double starFractLineLen;
    public static int starFractLineNum;
    public static double starFractLineShrink;
    public static double starFractLineStroke;
    
    public static double shapeFractLineLen;
    public static double shapeFractLineThin;
    public static double shapeFractLineStroke;
    public static boolean shapeFractFill;
    
    public static Color colorNow;
    private static double xStart;
    private static double yStart;
    
    private static ArrayList<XYPair> pairs;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearButton;
    private javax.swing.JRadioButton CombineRadioButton;
    private javax.swing.JButton ConfigureButton;
    public static javax.swing.JPanel DrawingPanel;
    private javax.swing.JComboBox<String> FractalsComboBox;
    private javax.swing.JLabel LevelLabel;
    private javax.swing.JRadioButton ReplaceRadioButton;
    private javax.swing.JButton RunButton;
    private javax.swing.JTextField TextField;
    // End of variables declaration//GEN-END:variables
}
